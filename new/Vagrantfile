# -*- mode: ruby -*-
# vi: set ft=ruby :

# Tested with Vagrant 2.0.2 https://releases.hashicorp.com/vagrant/2.0.2/

vagrant_use_proxy = ENV.fetch('VAGRANT_USE_PROXY', nil)
http_proxy        = ENV.fetch('HTTP_PROXY', nil)
box_name          = ENV.fetch('BOX_NAME', 'trusty64')
# for Windows test export BOX_NAME='windows7'

debug             = ENV.fetch('DEBUG', 'false')
box_basedir       = ENV.fetch('BOX_BASEDIR', nil)
box_memory        = ENV.fetch('BOX_MEMORY', '1024')
box_cpus          = ENV.fetch('BOX_CPUS', '2')
box_gui           = ENV.fetch('BOX_GUI', '')
debug             = (debug =~ (/^(true|t|yes|y|1)$/i))

if box_basedir.nil?
  basedir = ENV.fetch('USERPROFILE', '')
  basedir = ENV.fetch('HOME', '') if basedir == ''
  basedir = basedir.gsub('\\', '/')
else
  # e.g. export BOX_BASEDIR='/media/sergueik/Windows8_OS/Users/Serguei'
  # TODO: with a / space-constrained environment also need
  # ln -s /media/sergueik/Windows8_OS/temp/VirtualBox VMs  /home/sergueik/VirtualBox VMs
  # ln -s /media/sergueik/Windows8_OS/temp/.vagrant.d/boxes/windows7  /home/sergueik/.vagrant.d/boxes/windows7
  basedir = box_basedir
end
if debug
  puts "box_name=#{box_name}"
  puts "box_gui=#{box_gui}"
  puts "box_cpus=#{box_cpus}"
  puts "box_memory=#{box_memory}"
end

VAGRANTFILE_API_VERSION = '2'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Localy cached images
  case box_name

    when /trusty32/
      config_vm_box     = 'ubuntu'
      config_vm_box_url = "file://#{basedir}/Downloads/trusty-server-cloudimg-i386-vagrant-disk1.box"
    when /trusty64/
      config_vm_box     = 'ubuntu'
      config_vm_default = 'linux'
      config_vm_box_url = "file://#{basedir}/Downloads/trusty-server-cloudimg-amd64-vagrant-disk1.box"
   else
     # cached boxes from https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/
     # see also https://app.vagrantup.com/designerror/boxes/windows-7
     config_vm_default = 'windows'
     config_vm_newbox  = false
     if box_name =~ /xp/
       config_vm_box     = 'windows_xp'
       config_vm_box_url = "file://#{basedir}/Downloads/IE8.XP.For.Vagrant.box"
     elsif box_name =~ /2008/
       config_vm_box     = 'windows_2008'
       config_vm_box_url = "file://#{basedir}/Downloads/windows-2008R2-serverstandard-amd64_virtualbox.box"
     elsif box_name =~ /2012/
       config_vm_box     = 'windows_2012'
       config_vm_box_url = "file://#{basedir}/Downloads/windows_2012_r2_standard.box"
     else
      config_vm_box     = 'windows7'
      config_vm_box_url = "file://#{basedir}/Downloads/vagrant-win7-ie11.box"
     end
  end

  config.vm.define config_vm_default do |config|
    config.vm.box = config_vm_box
    config.vm.box_url  = config_vm_box_url
    puts "Configuring '#{config.vm.box}'"
    # Configure guest-specific port forwarding
    if config.vm.box !~ /windows/
      config.vm.network 'forwarded_port', guest: 5901, host: 5901, id: 'vnc', auto_correct: true
      config.vm.host_name = 'linux.example.com'
      config.vm.hostname = 'linux.example.com'
    else
      # clear HTTP_PROXY to prevent
      # WinRM::WinRMHTTPTransportError: Bad HTTP response returned from server (503)
      # https://github.com/chef/knife-windows/issues/143
      ENV.delete('HTTP_PROXY')
      # NOTE: WPA dialog blocks chef solo and makes Vagrant fail on modern.ie box
      config.vm.communicator      = 'winrm'
      config.winrm.username       = 'vagrant'
      config.winrm.password       = 'vagrant'
      config.vm.guest             = :windows
      config.windows.halt_timeout = 120
      # Port forward WinRM and RDP
      # https://www.vagrantup.com/docs/boxes/base.html
      # https://codeblog.dotsandbrackets.com/vagrant-windows/
      # does not seem to work from Windows host - pending validation from linux host
      config.vm.network :forwarded_port, guest: 3389, host: 3389, id: 'rdp', auto_correct: true
      config.vm.network :forwarded_port, guest: 5985, host: 5985, id: 'winrm', auto_correct:true
      config.vm.network :forwarded_port, guest: 5986, host: 5986, auto_correct:true
      config.vm.network :forwarded_port, guest: 389, host: 1389
      config.vm.host_name         = 'windows7'
      config.vm.boot_timeout      = 120
      # Ensure that all networks are set to 'private'
      config.windows.set_work_network = true
      # on Windows, use default data_bags share
    end
    # Configure common synced folder
    config.vm.synced_folder './' , '/vagrant'
    # Configure common port forwarding
    config.vm.network 'forwarded_port', guest: 4444, host: 4444, id: 'selenium', auto_correct:true
    config.vm.network 'forwarded_port', guest: 3000, host: 3000, id: 'reactor', auto_correct:true
    config.vm.provider 'virtualbox' do |vb|
      vb.gui = box_gui
      vb.customize ['modifyvm', :id, '--cpus', box_cpus ]
      vb.customize ['modifyvm', :id, '--memory', box_memory ]
      vb.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
      vb.customize ['modifyvm', :id, '--accelerate3d', 'off']
      vb.customize ['modifyvm', :id, '--audio', 'none']
      vb.customize ['modifyvm', :id, '--usb', 'off']
    end
# TODO: detect and abort run if there are vi files
# FATAL: Chef::Exceptions::AttributeNotFound: could not find filename for attribute .default.rb.swp in cookbook unix_sample
# https://github.com/chef/chef/issues/8057
# [ Adding VC Redistributable files required for powershell_exec on Window](/chef/chef/pull/8059)
# does not help
# FATAL: LoadError: Could not open library 'Chef.PowerShell.Wrapper.dll': 

    # Provision software
    puts "Provision software for '#{config.vm.box}'"
    case config_vm_box
      when /ubuntu|debian/
        config.vm.provision 'shell', inline: <<-EOF
# create the maven repo mockup
REPOSITORY='/home/vagrant/.m2/repository'
mkdir -p $REPOSITORY
# populate the maven repo mockup with real file to exercise the load
# the workspace directory has a small repository to seed the VM
sudo cp -R /vagrant/repository/ $REPOSITORY
chown -R vagrant:vagrant $REPOSITORY
du -s $REPOSITORY
EOF
        # Use Chef provisioner with Ubuntu
	# https://www.vagrantup.com/docs/provisioning/chef_solo.html
        config.vm.provision :chef_solo do |chef|
          chef.version = '14.10.9'
          # chef.data_bags_path = 'data_bags'
	  # will require downloading locally -
	  # all stock cookbooks need to be kept in.gitignore
          chef.add_recipe 'unix_sample'
          chef.log_level = 'info'
        end
      else # windows
	   # TODO: resurrect chef provision bootstrap
        if config_vm_newbox
          config.vm.provision :shell, inline: <<-EOF
  set-executionpolicy Unrestricted
  enable-remoting -force
          EOF
          # install .Net 4
          config.vm.provision :shell, :path => 'install_net4.ps1'
          # install chocolatey
          config.vm.provision :shell, :path => 'install_chocolatey.ps1'
          # install puppet using chocolatey
          config.vm.provision :shell, :path => 'install_puppet.ps1'
        end
        # Use chef provisioner
        config.vm.provision :chef_solo do |chef|
          # chef.version = '14.10.9'
          chef.version = '13.10.4'
          # chef.data_bags_path = 'data_bags'
	  # will require downloading locally -
	  # all stock cookbooks need to be kept in.gitignore
          chef.add_recipe 'windows_sample'
          chef.log_level = 'info'
        end
      end
    end
  end
